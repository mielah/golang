#install golang
sudo yum install -y golang

#install sublime
sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg
sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo
sudo yum install sublime-text

#set go workspace path
export GOPATH=$HOME/projects

#add workspace bin to path
export PATH=$PATH:$GOPATH/bin

#create directory in workspace to contain source code
mkdir -p $GOPATH/src/github.com/mielah

#for docker swarm
#install virtualbox
cd /etc/yum.repos.d
wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
sudo yum update
sudo yum install binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms
sudo yum install VirtualBox-6.0
sudo /usr/lib/virtualbox/vboxdrv.sh setup
sudo usermod -a -G vboxusers mielah
#install docker machine
base=https://github.com/docker/machine/releases/download/v0.16.0 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  sudo install /tmp/docker-machine /usr/local/bin/docker-machine

#FOR LEARNING: create new package path
  mkdir $GOPATH/src/github.com/mielah/hello
  #Go to that directory, create a file called hello.go and add:
  #package main
  #
  #import "fmt"
  #
  #func main() {
  #  fmt.Println("Hello, world.")
  #}

  #build and install the program
  go install github.com/user/hello

  #run this to execute
  $GOPATH/bin/hello
  #or this
  hello

  #Different program
  mkdir $GOPATH/src/github.com/mielah/stringutil

  #create a reverse.go in that directory and add this to the file:
  #// Package stringutil contains utility functions for working with strings.
  #package stringutil
  #
  #// Reverse returns its argument string reversed rune-wise left to right.
  #func Reverse(s string) string {
  #  r := []rune(s)
  #  for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {
  #    r[i], r[j] = r[j], r[i]
  #  }
  #  return string(r)
  #}

  #run go install
  go build github.com/mielah/stringutil
  #doesn't create an output file but it saves the compiled package into the local build 

  #add this to hello.go
  #package main

  #import (
  #  "fmt"
  #
  #  "github.com/user/stringutil"
  #)
  #
  #func main() {
  #  fmt.Println(stringutil.Reverse("!oG ,olleH"))
  #}

  #install the hello program
  go install github.com/mielah/hello

  #now run
  hello
  
  
  #Now use the testing framework
  #test files must end in _test.go
  
  #create reverse_test.go and paste code
  #package stringutil
  #
  #import "testing"
  #
  #func TestReverse(t *testing.T) {
  #  cases := []struct {
  #    in, want string
  #  }{
  #    {"Hello, world", "dlrow ,olleH"},
  #    {"Hello, 世界", "界世 ,olleH"},
  #    {"", ""},
  #  }
  #  for _, c := range cases {
  #    got := Reverse(c.in)
  #    if got != c.want {
  #      t.Errorf("Reverse(%q) == %q, want %q", c.in, got, c.want)
  #    }
  #  }
  }
  
  #run test
  go test github.com/mielah/stringutil
  
  #fetching remote packages
  #if it already exists then acts like go install
  go get github.com/golang/example/hello
  
  
 #you can run a main.go file without installing
 go run *.go 
  
  #execute
  $GOPATH/bin/hello

  #When building a go executable for linux and specifying executable name
  export CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  go build -o goExeName
  #change GOOS back to what it was if not using linux
  
  #build the docker image from on directory up (in accountservice's parent)
  sudo docker build -t mielah/accountservice accountservice/
  #use docker push to make the image visible to other 
