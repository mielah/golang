GENERAL
  -the first line in a go source file has to be:
  package name
  -all files in the same package must have the same name
  -should also be the last element in the path (the directory name)
  -executable commands have to use package main
  -Execute "go get" in the same directory as your go files to add any imports to workspace
  -Gorilla mux is basically like the ang2+ router 
    -Matches incoming request to list of routes and calls the handler that matches the URL and other conditions
  -strconv.Itoa() converts int to string


TESTING
  -testing files must be named like _test.go
  -testing functions must be named like TestXXX with signature func (t *testing.T)
  -if t.Error or t.Fail is called, the test is failed
  -To run tests in all directories: go test ./...



SYNTAX
  -Creating an object
    type objName struct {
      property  type
      ...
    }
    
  -Using struct to define another type
    type objTwo objName[]
    
  -Initialize an objTwo
    var obj2Instance = objTwo {
        objName {
          "property1",
          "property2",
          3
          ...
        }
    }
     
    -_ is a blank identifier if you don't need one of the return values
    
    -range variant of for loops:
      for i, v := range arrayName
      -i is the index, v is the element
      
      
    -Creating an instance of a struct
      var a Car
      a := new(Car)
      a := Car{brand: "Tesla", year: 2016, color: "white"}
      a := Car{"Tesla", 2016, "white"}
      
    -Adding a function for an object
      func (cr *Car) value() float64 {}
        -The (cr *Car) portion means we can use the function like a.value()
    
    -When defining a struct, a first uppercase letter means public otherwise private to package
    -The Is-a instead of Has-a relationship
      Instead of 
        type Android struct { #Android is public, android would be private
          Person Person
          Name  string
        }
       DO: (leave the property name empty)
        type Android struct {
          Person
          Name string
        }
        
     -Person functions can be accessed like 
        a := new(Android)
        a.Person.talk()
        #or
        a.talk()
        
        
      -Interface syntax:
        type Shape interface {
          #mandatory fields/methods here
        }
        
        -Functions for interfaces
        func totalArea(shapes ...Shape) float64 {} #arg can be any struct that implements Shape interface
        #...Shape means the input can be a list/array of Shape objects (use for range to access them all)

      -Retrieving variables from url path:
        -var varA = mux.Vars(r)["paramName"] //where r = *http.Request
